/// <reference types="node" />
import { RedisCommand, RedisModules, TransformArgumentsReply } from './commands';
import { ClientCommandOptions, WithPlugins } from './client';
import { RedisSocketOptions } from './socket';
import { ClusterNode } from './cluster-slots';
import { RedisLuaScript, RedisLuaScripts } from './lua-script';
import { RedisMultiCommandType } from './multi-command';
import { EventEmitter } from 'events';
export interface RedisClusterOptions<M = RedisModules, S = RedisLuaScripts> {
    rootNodes: Array<RedisSocketOptions>;
    modules?: M;
    scripts?: S;
    useReplicas?: boolean;
    maxCommandRedirections?: number;
}
export declare type RedisClusterType<M extends RedisModules = {}, S extends RedisLuaScripts = {}> = WithPlugins<M, S> & RedisCluster<M, S>;
export default class RedisCluster<M extends RedisModules = {}, S extends RedisLuaScripts = {}> extends EventEmitter {
    #private;
    static create<M extends RedisModules = {}, S extends RedisLuaScripts = {}>(options?: RedisClusterOptions<M, S>): RedisClusterType<M, S>;
    constructor(options: RedisClusterOptions<M, S>);
    duplicate(): RedisClusterOptions<M, S>;
    connect(): Promise<void>;
    commandsExecutor(command: RedisCommand, args: Array<unknown>): Promise<ReturnType<typeof command['transformReply']>>;
    sendCommand<C extends RedisCommand>(firstKey: string | Buffer | undefined, isReadonly: boolean | undefined, args: TransformArgumentsReply, options?: ClientCommandOptions, bufferMode?: boolean, redirections?: number): Promise<ReturnType<C['transformReply']>>;
    scriptsExecutor(script: RedisLuaScript, args: Array<unknown>): Promise<ReturnType<typeof script['transformReply']>>;
    executeScript(script: RedisLuaScript, originalArgs: Array<unknown>, redisArgs: TransformArgumentsReply, options?: ClientCommandOptions, redirections?: number): Promise<ReturnType<typeof script['transformReply']>>;
    multi(routing: string): RedisMultiCommandType<M, S>;
    getMasters(): Array<ClusterNode<M, S>>;
    getSlotMaster(slot: number): ClusterNode<M, S>;
    disconnect(): Promise<void>;
}
