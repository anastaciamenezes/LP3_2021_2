/// <reference types="node" />
import { RedisReply } from './commands';
export interface QueueCommandOptions {
    asap?: boolean;
    chainId?: symbol;
    signal?: any;
}
export declare enum PubSubSubscribeCommands {
    SUBSCRIBE = "SUBSCRIBE",
    PSUBSCRIBE = "PSUBSCRIBE"
}
export declare enum PubSubUnsubscribeCommands {
    UNSUBSCRIBE = "UNSUBSCRIBE",
    PUNSUBSCRIBE = "PUNSUBSCRIBE"
}
export declare type PubSubListener = (message: string, channel: string) => unknown;
export declare type PubSubListenersMap = Map<string, Set<PubSubListener>>;
export default class RedisCommandsQueue {
    #private;
    constructor(maxLength: number | null | undefined);
    addCommand<T = RedisReply>(args: Array<string | Buffer>, options?: QueueCommandOptions, bufferMode?: boolean): Promise<T>;
    subscribe(command: PubSubSubscribeCommands, channels: string | Array<string>, listener: PubSubListener): Promise<void>;
    unsubscribe(command: PubSubUnsubscribeCommands, channels?: string | Array<string>, listener?: PubSubListener): Promise<void>;
    resubscribe(): Promise<any> | undefined;
    getCommandToSend(): Array<string | Buffer> | undefined;
    parseResponse(data: Buffer): void;
    flushWaitingForReply(err: Error): void;
    flushAll(err: Error): void;
}
